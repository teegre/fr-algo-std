Librairie

#########################################
# UTILITAIRES POUR CHAÎNES DE CARACTÈRES
#########################################

Fonction estalpha(c en Caractère) en Booléen
  # Retourne VRAI si `c` est un caractère alphabétique.
  Variable réponse en Booléen

  # A-Z
  réponse <- (CodeCar(c) > 64) ET (CodeCar(c) < 91)
  # a-z
  réponse <- réponse OU ((CodeCar(c) > 96) ET (CodeCar(c) < 123))
  # À-ž
  réponse <- réponse OU ((CodeCar(c) > 191) ET (CodeCar(c) < 383))

  Retourne réponse
FinFonction

Fonction estnum(c en Caractère) en Booléen
  # Retourne VRAI si  `c` est un caractère numérique..
  Retourne (CodeCar(c) > 47) ET (CodeCar(c) < 58)
FinFonction

Fonction chaîne_estnum(chaîne en Chaîne) en Booléen
  # Retourne VRAI si `chaîne` ne contient que des chiffres.
  Variable i en Entier
  Variable c en Caractère
  Variable réponse en Booléen

  réponse <- VRAI

  Pour i <- 1 à Longueur(chaîne)
    c <- Extraire(chaîne, i, 1)
    réponse <- réponse ET estnum(c)
  i Suivant

  Retourne réponse
FinFonction

Fonction majus(ch en Chaîne) en Chaîne
  # Convertit une chaîne de caractères en majuscules.
  Variable i en Entier
  Variable résultat en Chaîne
  Variable c en Caractère
  Variable condition en Booléen

  résultat <- ""

  Pour i <- 1 à Longueur(ch)
    c <- Extraire(ch, i, 1)
    condition <- estalpha(c)
    condition <- condition ET ((CodeCar(c) >  96) ET (CodeCar(c) < 123))
    condition <- condition OU ((CodeCar(c) > 223) ET (CodeCar(c) < 254))
    Si condition Alors
      résultat <- résultat & Car(CodeCar(c) - 32)
    Sinon
      résultat <- résultat & c
    FinSi
  i Suivant

  Retourne résultat
FinFonction

Fonction minus(ch en Chaîne) en Chaîne
  # Convertit une chaîne de caractères en minuscules.
  Variable i en Entier
  Variable résultat en Chaîne
  Variable c en Caractère
  Variable condition en Booléen

  résultat <- ""

  Pour i <- 1 à Longueur(ch)
    c <- Extraire(ch, i, 1)
    condition <- estalpha(c)
    condition <- condition ET ((CodeCar(c) >  64) ET (CodeCar(c) <  91))
    condition <- condition OU ((CodeCar(c) > 191) ET (CodeCar(c) < 222))
    Si condition Alors
      résultat <- résultat & Car(CodeCar(c) + 32)
    Sinon
      résultat <- résultat & c
    FinSi
  i Suivant

  Retourne résultat
FinFonction

###########################################
# UTILITAIRES POUR MODIFIER DES ATTRIBUTS 
# DES CARACTÈRES AFFICHÉS DANS UN TERMINAL
###########################################

# NOTE: les attributs du texte sont automatiquement remis à zéro
# après utilisation lors d'une utilisation dans un environnement interactif.

Fonction rvb(r, v, b en Entier) en Chaîne
  # Retourne un code pour le terminal qui
  # change la couleur du texte.
  Variable code en Chaîne
  code <- "\033[38;2;"
  code <- code & Chaîne(r) & ";"
  code <- code & Chaîne(v) & ";"
  code <- code & Chaîne(b) & "m"
  Retourne code
FinFonction

Fonction frvb(r, v, b en Entier) en Chaîne
  # Retourne un code pour le terminal qui
  # change la couleur du fond.
  Variable code en Chaîne
  code <- "\033[48;2;"
  code <- code & Chaîne(r) & ";"
  code <- code & Chaîne(v) & ";"
  code <- code & Chaîne(b) & "m"
  Retourne code
FinFonction

Fonction attr(a en Chaîne) en Chaîne
  # Retourne un code pour le terminal qui
  # change un attribut du texte :
  # gr(as) at(tenué) it(alique) so(uligné) cl(ignotant) in(verse)
  Si a = "gr" Alors
    Retourne "\033[1m"
  SinonSi a = "at" Alors
    Retourne "\033[2m"
  SinonSi a = "it" Alors
    Retourne "\033[3m"
  SinonSi a = "so" Alors
    Retourne "\033[4m"
  SinonSi a = "cl" Alors
    Retourne "\033[5m"
  SinonSi a = "in" Alors
    Retourne "\033[7m"
  FinSi
  Retourne ""
FinFonction

Fonction fina() en Chaîne
  # Annule tous les attributs/couleurs en cours.
  Retourne "\033[0m"
FinFonction

Procédure efface_ecran()
  Ecrire "\033[2J\033[H" \
FinProcédure

Procédure pos_curseur(lgn, col en Entier)
  # Positionne le curseur : lgn (ligne) et col (colonne).
  Ecrire "\033[" & Chaîne(lgn) & ";" & Chaîne(col) & "H" \
FinProcédure

Procédure pos_ecrire(lgn, col en Entier, texte en Chaîne)
  # Ecrit le texte à la position donnée.
  pos_curseur(lgn, col)
  Ecrire texte \
FinProcédure

Procédure pos_col(col en Entier)
  Ecrire "\033[" & Chaîne(col) & "G" \
FinProcédure

Procédure efface_fdl()
  # Efface depuis la position du curseur jusqu'à la fin de la ligne.
  Ecrire "\033[K" \
FinProcédure

Procédure efface_bde()
  # Efface depuis la position du curseur jusqu'au bas de l'écran.
  Ecrire "\033[0J" \
FinProcédure

Procédure efface_ligne()
  # Efface la ligne à la position du curseur.
  Ecrire "\033[2K" \
FinProcédure

Procédure cache_curseur()
  Ecrire "\033[?25l" \
FinProcédure

Procédure montre_curseur()
  Ecrire "\033[?25h" \
FinProcédure

Procédure sauve_curseur()
  # Enregistre la position du curseur.
  Ecrire "\033[s" \
FinProcédure

Procédure restaure_curseur()
  # Restaure la position du curseur enregistée precédemment.
  Ecrire "\033[u" \
FinProcédure

Procédure reinit()
  # Réinitialise les attributs du terminal.
  Ecrire "\033[21m\033[22m\033[23m\033[24m\033[25m\033[27m"
FinProcédure

#####################
# AUTRES UTILITAIRES
#####################

Fonction base(nombre, base en Entier) en Chaîne
  Variables caracteres, resultat en Chaîne
  Si base < 2 OU base > 36 Alors
    Retourne "-1"
  FinSi
  Si nombre = 0 Alors
    Retourne "0"
  FinSi
  caracteres <- "0123456789ABCDEFGHIJKLMMNOPQRSTUVWXYZ"
  resultat <- ""
  TantQue nombre > 0
    resultat <- Extraire(caracteres, nombre % base + 1, 1) & resultat
    nombre <- nombre / base
  FinTantQue
  Retourne resultat
FinFonction

Fonction base10(nombre en Chaîne, base en Entier) en Entier
  Variable caracteres en Chaîne
  Variables index, car_index, resultat en Entier
  Si base < 2 OU base > 36 Alors
    Ecrire "Erreur : base invalide >", base, "< [2-36]"
    Retourne -1
  FinSi
  Si nombre = 0 Alors
    Retourne 0
  FinSi
  caracteres <- "0123456789ABCDEFGHIJKLMMNOPQRSTUVWXYZ"
  resultat <- 0
  Pour index <- 1 à Longueur(nombre)
    car_index <- Trouve(caracteres, Extraire(nombre, index, 1)) - 1
    Si car_index > base Alors
      Retourne -1
    FinSi
    resultat <- resultat * base
    resultat <- resultat + car_index
  index Suivant
  Retourne resultat
FinFonction

Procédure Scinder(chaine, separateur, &elements[] en Chaîne)
  # Scinde une chaine de caractères en éléments d'un tableau
  # selon un séparateur.
  Variable sous_chaine en Chaîne
  Variable index en Entier

  index <- -1

  TantQue Trouve(chaine, separateur) > 0
    sous_chaine <- Gauche(chaine, Trouve(chaine, separateur) - 1)
    index <- index + 1
    Redim elements[index]
    elements[index] <- sous_chaine
    chaine <- Droite(chaine, Longueur(chaine) - Trouve(chaine, separateur))
  FinTantQue

  index <- index + 1
  Redim elements[index]
  elements[index] <- chaine
FinProcédure

Fonction Index(valeur en Chaîne, T[] en Chaîne, casse en Booléen) en Entier
  Variable i en Entier
  Variables v1, v2 en Chaîne
  Si NON(casse) Alors
    v2 <- minus(valeur)
  Sinon
    v2 <- valeur
  FinSi
  Pour i <- 0 à Taille(T) - 1
    Si NON(casse) Alors
      v1 <- minus(T[i])
    FinSi
    Si v1 = v2 Alors
      Retourne i
    FinSi
  i Suivant
  Retourne -1
FinFonction

Fonction Arrondir(n en Numérique, p en Entier) en Numérique
  # Arrondit un Numérique `n` selon un nombre de chiffre après la virgule `p`.
  Variables t, i, f en Chaîne
  t <- Chaîne(n)
  i <- Extraire(t, 1, Trouve(t, "."))
  f <- Extraire(t, Trouve(t, ".") + 1, p)
  Retourne Numérique(i & f)
FinFonction

Fonction AléaP(poids[] en Numérique) en Entier
  # Retourne un en entier aléatoire
  # entre 0 et Taille(poids) - 1 (inclus)
  # selon une liste de poids donnée en paramètre.
  Variables s, r en Numérique
  Variable i en Entier

  Si Taille(poids) = 0 Alors
    Retourne 0
  FinSi

  s <- 0.0
  Pour i <- 0 à Taille(poids) - 1
    s <- s + poids[i]
  i Suivant

  r <- Aléa() * s
  Pour i <- 0 à Taille(poids) - 1
    r <- r - poids[i]
    Si r < 0 Alors
      Retourne i
    FinSi
  i Suivant

  Retourne Taille(poids) - 1
FinFonction

Fonction SommeNum(T[] en Numérique) en Numérique
  # Retourne la somme des valeurs d'un Tableau
  # contenant des Numériques.
  Variable i en Entier
  Variable s en Numérique
  s <- 0.0
  Pour i <- 0 à Taille(T) - 1
    s <- s + T[i]
  i Suivant
  Retourne s
FinFonction

Fonction SommeEnt(T[] en Entier) en Entier
  # Retourne la somme des valeurs d'un Tableau
  # contenant des Numériques.
  Variables i, s en Entier
  s <- 0
  Pour i <- 0 à Taille(T) - 1
    s <- s + T[i]
  i Suivant
  Retourne s
FinFonction

Fonction CompteNum(T[] en Numérique, valeur en Numérique) en Entier
  # Retourne le nombre d'occurences d'une valeur Numérique
  # se trouvant dans un Tableau
  Variables c, i en Entier
  c <- 0
  Pour i <- 0 à Taille(T) - 1
    Si T[i] = valeur Alors
      c <- c + 1
    FinSi
  i Suivant
  Retourne c
FinFonction

Fonction CompteEnt(T[] en Entier, valeur en Entier) en Entier
  # Retourne le nombre d'occurences d'une valeur de type Entier
  # se trouvant dans un Tableau
  Variables c, i en Entier
  c <- 0
  Pour i <- 0 à Taille(T) - 1
    Si T[i] = valeur Alors
      c <- c + 1
    FinSi
  i Suivant
  Retourne c
FinFonction

Fonction CompteCh(T[] en Chaîne, valeur en Chaîne) en Entier
  # Retourne le nombre d'occurences d'une valeur de type Chaîne
  # se trouvant dans un Tableau
  Variables c, i en Entier
  c <- 0
  Pour i <- 0 à Taille(T) - 1
    Si T[i] = valeur Alors
      c <- c + 1
    FinSi
  i Suivant
  Retourne c
FinFonction

Fonction IndexEnt(T[] en Entier, valeur en Entier) en Entier
  # Retourne l'index d'une valeur dans un Tableau.
  # Retourne -1 si non trouvée.
  Variable i en Entier
  Pour i <- 0 à Taille(T) - 1
    Si T[i] = valeur Alors
      Retourne i
    FinSi
  i Suivant
  Retourne -1
FinFonction

Fonction MaxNum(a, b en Numérique) en Numérique
  Si a > b Alors
    Retourne a
  FinSi
  Retourne b
FinFonction

Fonction MaxEnt(a, b en Entier) en Entier
  Si a > b Alors
    Retourne a
  FinSi
  Retourne b
FinFonction

Fonction TMaxNum(T[] en Numérique) en Numérique
  Variable i en Entier
  Variable n en Numérique
  n <- T[0]
  Pour i <- 1 à Taille(T) - 1
    Si n > T[i] Alors
      n = T[i]
    FinSi
  i Suivant
  Retourne n
FinFonction

Fonction TMaxEnt(T[] en Entier) en Entier
  Variable i en Entier
  Variable n en Entier
  n <- T[0]
  Pour i <- 1 à Taille(T) - 1
    Si n > T[i] Alors
      n = T[i]
    FinSi
  i Suivant
  Retourne n
FinFonction
