Librairie

Importer "stdlib" Alias std

#############
# CONSTANTES
#############

Constante @DATELIB_AUTEUR   "Stéphane MEYER (Teegre)"
Constante @DATELIB_VERSION  "0.0.1"
Constante @DATELIB_DATE_MOD "2025/04/22"

Constante @EPOQUE 1970
Constante @SECSJ  86400

# la première semaine ISO commence un lundi
Constante @SEMISO_A  1
# La première semaine de l’année ISO est celle qui contient le premier jeudi.
Constante @SEMISO1_A 4
# Assure que les calculs couvrent les années bissextiles.
Constante @MINJ -366
# On cherche un multiple de 7 suffisamment grand pour que l'opération
# modulo suivante soit toujours positive.
Constante @GM7 (-@MINJ / 7 + 2) * 7


Constante @JOURS [                 \\
  "dimanche" ,"lundi", "mardi",    \\
  "mercredi", "jeudi", "vendredi", \\
  "samedi"                         \\
]

Constante @JOURS_ABR [    \\
  "dim." ,"lun.", "mar.", \\
  "mer.", "jeu.", "ven.", \\
  "sam."                  \\
]
Constante @MOIS [                                \\
  "janvier", "février", "mars", "avril",         \\
  "mai", "juin", "juillet", "août",              \\
  "septembre", "octobre", "novembre", "décembre" \\
]

Constante @MOIS_ABR [               \\
  "janv.", "févr.", "mars", "avr.", \\
  "mai", "juin", "juill.", "août",  \\
  "sept.", "oct.", "nov.", "déc."   \\
]

# Nb. jours par mois
Constante @NJOURSMOIS [                    \\
  [0,31,28,31,30,31,30,31,31,30,31,30,31], \\
  [0,31,29,31,30,31,30,31,31,30,31,30,31]  \\
]

################################
# STRUCTURES POUR DATE ET HEURE
################################

Structure TDate
  # jour de la semaine
  A en Entier
  # jour du mois
  d en Entier
  # mois
  m en Entier
  # année
  Y en Entier
FinStructure

Structure THeure
  # heures
  H en Entier
  # minutes
  M en Entier
  # secondes
  S en Entier
  # nanosecondes
  N en Entier
FinStructure

Structure TDateHeure
  # jour de l'année
  j en Entier
  # semaine ISO (1er jour = lundi)
  V en Entier
  # date
  date en TDate
  # heure
  heure en THeure
FinStructure

##############################
# UTILITAIRES POUR DATE/HEURE
##############################

Fonction @Bissextile(Y en Entier) en Entier
  # Teegre :
  # Retourne 1 si l'année donnée est bissextile,
  # sinon 0.
  Retourne Entier((Y % 4 = 0) ET ( (Y % 100 <> 0) OU (Y % 400 = 0) ))
FinFonction

Fonction @JoursAn(Y en Entier) en Entier
  # Teegre :
  # Renvoie le nombre de jours d'une année donnée.
  Constante JOURS [365,366]
  Retourne JOURS[@Bissextile(Y)]
FinFonction

Fonction @dValide(Y, m, d en Entier) en Booléen
  # Teegre :
  # Retourne 1 si le jour du mois 'd' est valide
  # pour le mois 'm' de l'année 'Y', sinon 0
  Variable J en Entier
  J ← @NJOURSMOIS[@Bissextile(Y), m]
  Retourne Entier(J <= m ET J > 0)
FinFonction

Fonction @JoursSemaineISO(j, A en Entier) en Entier
  # Teegre :
  # Renvoie le nombre de jours écoulés depuis le
  # début de la semaine ISO qui comprend le jour donné
  # sous la forme : 'j' le jour de l'année, 'A' jour de la semaine.

  # (j - A + @SEMISO1_A + GM7) % 7) 
  # ramène j - A au jeudi de la semaine ISO correspondante.
  # On soustrait ce résultat à 'j' pour obtenir le premier jour de la semaine ISO.
  # On ajuste en soustrayant SEMISO_A (1, soit lundi) pour retourner le bon nombre
  # de jours écoulés.
  Retourne (j - (j - A + @SEMISO1_A + @GM7) % 7 + @SEMISO1_A - @SEMISO_A)
FinFonction

Fonction @SemaineISO(Y, j, A en Entier) en Entier
  # Teegre :
  # Renvoie le numéro de semaine ISO pour une année,
  # une jour de l'année et jour de la semaine donnés.
  # <https://en.wikipedia.org/wiki/ISO_week_date#Algorithms>
  Variables V, y, Ap, yp en Entier

  # /!\ Dimanche est le premier jour de la semaine (donc 0 <= A <= 6)
  # Dans l'algorithme suivant, le lundi est le premier jour de la semaine
  # donc :
  Si A = 0 Alors
    A ← 7
  FinSi

  V ← (j - A + 10) / 7

  y ← @JoursAn(Y)

  Si V < 1 Alors
    Retourne @SemaineISO(Y-1, @JoursAn(Y-1), std:Abs(j - A))
  FinSi

  Si V = 53 Alors
    # Jour de la semaine du 1er janvier de l'année suivante
    Ap ← (j - A + y) % 7

    Si Ap = 0 Alors
      Ap ← 7
    FinSi

    # Jour de la semaine du début de la première semaine ISO
    yp ← std:Abs(@SEMISO1_A - ((Ap - 1 + 7) % 7)) + 1
    Si yp = 0 Alors
      yp ← 7
    FinSi

    Si @JoursSemaineISO(y, Ap) <= y Alors
      Retourne 1
    FinSi
  FinSi

  Retourne V
FinFonction

Fonction LocalversUNIX(date en Chaîne) en Numérique
  # Teegre :
  # Convertit une chaîne de caractères [J]J/[M]M/[DD]DD [H]H:[M]M:[S]S
  Variables N, S, M, H, A, m, d, j en Entier
  Retourne 0
FinFonction

Procédure UNIXversLocal(horodatage en Numérique, &tdh en TDateHeure)
  # Teegre ;
  # Remplit une structure TDateHeure contenant la date et l'heure
  # selon un horodatage donné (en temps UNIX).
  Variable zh en Chaîne
  Variables zhh, zhm, zhs en Entier
  Variables jourhor, numjour, année, bx en Entier
  Variable y en Entier

  zh ← ZoneHoraire(horodatage)

  # ZoneHoraire() peut retourner une chaîne
  # contenant des secondes, par exemple : "+000921".
  Si Longueur(zh) > 5 Alors
    zhh ← Entier(Gauche(zh, 3))
    zhm ← Entier(Extraire(zh, 4, 2))
    zhs ← Entier(Extraire(zh, 6, Longueur(zh) - 5))
    horodatage ← horodatage + zhh * 3600 + zhm * 60 + zhs
  Sinon
    zhh ← Entier(zh)
    horodatage ← horodatage + (zhh / 100 * 3600) + (zhh % 100 * 3600)
  FinSi

  année ← @EPOQUE
  
  jourhor ← Entier(horodatage % @SECSJ)
  numjour ← Entier(horodatage / @SECSJ)
  
  Si horodatage < 0 ET jourhor > 0 Alors
    numjour ← numjour - 1
  FinSi

  tdh.heure.N ← Entier((horodatage % 1) * 10^9)
  tdh.heure.S ← jourhor % 60
  tdh.heure.M ← (jourhor % 3600) / 60
  tdh.heure.H ← jourhor / 3600
  tdh.date.A  ← (numjour + @SEMISO1_A) % 7

  Si numjour >= 0 Alors
    TantQue numjour >= @JoursAn(année)
      numjour ← numjour - @JoursAn(année)
      année ← année + 1
    FinTantQue
  Sinon
    TantQue numjour < 0
      numjour ← numjour + @JoursAn(année - 1)
      année ← année - 1
    FinTantQue
  FinSi

  Si année < 1 Alors
    Panique "Les dates dont l'année est inférieure à 2 ne sont pas prises en charge."
  FinSi

  tdh.date.Y ← année

  y ← @JoursAn(année)

  numjour ← numjour + 1
  numjour ← std:Min(numjour, y)

  tdh.j ← numjour

  bx ← @Bissextile(année)

  tdh.date.m ← 0

  TantQue numjour > @NJOURSMOIS[bx,tdh.date.m]
    numjour ← numjour - @NJOURSMOIS[bx,tdh.date.m]
    tdh.date.m ← tdh.date.m + 1
  FinTantQue

  tdh.date.d ← numjour
  tdh.V ← @SemaineISO(tdh.date.Y, tdh.j, tdh.date.A)
FinProcédure

Fonction Format(horodatage en Numérique, format en Chaîne) en Chaîne
  # Teegre :
  # Formate une date et une heure (en temps UNIX) selon un format spécifié,
  # en remplaçant les différents codes de formatage par les valeurs correspondantes
  # de la date et de l'heure.
  #
  # Les codes de formatage sont identiques à la commande `date` de `coreutils`.
  #
  # %A jour de la semaine (lundi)
  # %a jour de la semaine (lun.)
  # %B mois (janvier)
  # %b mois (jan.)
  # %C Siècle (21)
  # %c date et heure (ex : lun. 24 mar. 2025 11:35:20)
  # %d jour du mois (01..31)
  # %D date (identique à %d/%m/%y)
  # %F date (identique à %d/%m/%Y)
  # %H heures (00..23)
  # %I heures (01..12)
  # %j jour de l'année (001..366)
  # %M minutes (00..59)
  # %m mois (01..12)
  # %N nanosecondes (000000000..999999999)
  # %P am/pm
  # %p AM/PM
  # %S secondes (01..59)
  # %V semaine ISO (1er jour = lundi) (01..53)
  # %x bissextile (0..1)
  # %Y année (2025)
  # %y deux derniers chiffres de l'année (00..99)
  # %Z Zone horaire au format texte (ex : EDT)
  # %z Zone horaire (+0000)

  Variable tdateheure en TDateHeure
  Variables ch, P en Chaîne
  Variables C, y, H, I, M, x en Entier

  UNIXversLocal(horodatage, tdateheure)
  H ← tdateheure.heure.H

  Si H % 12 = 0 Alors
    I ← 12
  Sinon
    I ← H % 12
  FinSi
  Si H > 0 ET H < 12 Alors
    P ← "AM"
  Sinon
    P ← "PM"
  FinSi

  C ← Entier(Gauche(Chaîne(tdateheure.date.Y), 2))
  y ← Entier(Droite(Chaîne(tdateheure.date.Y), 2))

  x ← @Bissextile(tdateheure.date.Y)

  Si y > 0 Alors
    C ← C + 1
  FinSi

  ch ← format
  ch ← std:Remplacer(ch, "%c", "%a %d %b %Y %H:%M:%S")
  ch ← std:Remplacer(ch, "%D", "%d/%m/%y")
  ch ← std:Remplacer(ch, "%F", "%d/%m/%Y")
  ch ← std:Remplacer(ch, "%T", "%H:%M:%S")
  ch ← std:Remplacer(ch, "%A", @JOURS[tdateheure.date.A])
  ch ← std:Remplacer(ch, "%a", @JOURS_ABR[tdateheure.date.A])
  ch ← std:Remplacer(ch, "%B", @MOIS[tdateheure.date.m - 1])
  ch ← std:Remplacer(ch, "%b", @MOIS_ABR[tdateheure.date.m - 1])
  ch ← std:Remplacer(ch, "%C", Chaîne(C))
  ch ← std:Remplacer(ch, "%d", std:RemplirGauche(tdateheure.date.d, "0", 2))
  ch ← std:Remplacer(ch, "%H", std:RemplirGauche(H, "0", 2))
  ch ← std:Remplacer(ch, "%I", std:RemplirGauche(I, "0", 2))
  ch ← std:Remplacer(ch, "%j", std:RemplirGauche(tdateheure.j, "0", 3))
  ch ← std:Remplacer(ch, "%M", std:RemplirGauche(tdateheure.heure.M, "0", 2))
  ch ← std:Remplacer(ch, "%m", std:RemplirGauche(tdateheure.date.m, "0", 2))
  ch ← std:Remplacer(ch, "%N", std:RemplirGauche(tdateheure.heure.N, "0", 9))
  ch ← std:Remplacer(ch, "%P", std:Minus(P))
  ch ← std:Remplacer(ch, "%p", P)
  ch ← std:Remplacer(ch, "%S", std:RemplirGauche(tdateheure.heure.S, "0", 2))
  ch ← std:Remplacer(ch, "%V", std:RemplirGauche(tdateheure.V, "0", 2))
  ch ← std:Remplacer(ch, "%x", Chaîne(x))
  ch ← std:Remplacer(ch, "%Y", std:RemplirGauche(tdateheure.date.Y, "0", 4))
  ch ← std:Remplacer(ch, "%y", std:RemplirGauche(y, "0", 2))
  ch ← std:Remplacer(ch, "%Z", ZoneHoraireTxt(horodatage))
  ch ← std:Remplacer(ch, "%z", Gauche(ZoneHoraire(horodatage), 5))

  Retourne ch

FinFonction
