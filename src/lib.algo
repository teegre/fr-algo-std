Librairie

Constante PI 3.141592653589793

#########################################
# UTILITAIRES POUR CHAÎNES DE CARACTÈRES
#########################################

Fonction ___EstAlpha(c en Caractère) en Booléen
  # Retourne VRAI si `c` est un caractère alphabétique.
  Variable réponse en Booléen

  # A-Z
  réponse <- (CodeCar(c) > 64) ET (CodeCar(c) < 91)
  # a-z
  réponse <- réponse OU ((CodeCar(c) > 96) ET (CodeCar(c) < 123))
  # À-ž
  réponse <- réponse OU ((CodeCar(c) > 191) ET (CodeCar(c) < 383))

  Retourne réponse
FinFonction

Fonction ___EstNum(c en Caractère) en Booléen
  # Retourne VRAI si  `c` est un caractère numérique..
  Retourne (CodeCar(c) > 47) ET (CodeCar(c) < 58)
FinFonction

Fonction EstNum(ch en Chaîne) en Booléen
  # Retourne VRAI si `chaîne` ne contient que des chiffres.
  Variable i en Entier
  Variable c en Caractère
  Variable réponse en Booléen

  réponse <- VRAI

  Pour i <- 1 à Longueur(ch)
    c <- Extraire(ch, i, 1)
    réponse <- réponse ET ___EstNum(c)
    Si NON(réponse) Alors
      Retourne FAUX
    FinSi
  i Suivant

  Retourne réponse
FinFonction

Fonction EstAlpha(ch en Chaîne) en Booléen
  # Retourne vrai si `ch` ne contient que des caractères alphabétiques.
  Variable i en Entier
  Variable c en Caractère
  Variable r en Booléen

  r <- VRAI

  Pour i <- 1 à Longueur(ch)
    c <- Extraire(ch, i, 1)
    r <- r ET ___EstAlpha(c)
    Si NON(r) Alors
      Retourne FAUX
    FinSi
  i Suivant

  Retourne r
FinFonction

Fonction Majus(ch en Chaîne) en Chaîne
  # Convertit une chaîne de caractères en majuscules.
  Variable i en Entier
  Variable résultat en Chaîne
  Variable c en Caractère
  Variable condition en Booléen

  résultat <- ""

  Pour i <- 1 à Longueur(ch)
    c <- Extraire(ch, i, 1)
    condition <- ___EstAlpha(c)
    condition <- condition ET ((CodeCar(c) >  96) ET (CodeCar(c) < 123))
    condition <- condition OU ((CodeCar(c) > 223) ET (CodeCar(c) < 254))
    Si condition Alors
      résultat <- résultat & Car(CodeCar(c) - 32)
    Sinon
      résultat <- résultat & c
    FinSi
  i Suivant

  Retourne résultat
FinFonction

Fonction Minus(ch en Chaîne) en Chaîne
  # Convertit une chaîne de caractères en minuscules.
  Variable i en Entier
  Variable résultat en Chaîne
  Variable c en Caractère
  Variable condition en Booléen

  résultat <- ""

  Pour i <- 1 à Longueur(ch)
    c <- Extraire(ch, i, 1)
    condition <- ___EstAlpha(c)
    condition <- condition ET ((CodeCar(c) >  64) ET (CodeCar(c) <  91))
    condition <- condition OU ((CodeCar(c) > 191) ET (CodeCar(c) < 222))
    Si condition Alors
      résultat <- résultat & Car(CodeCar(c) + 32)
    Sinon
      résultat <- résultat & c
    FinSi
  i Suivant

  Retourne résultat
FinFonction

Procédure Scinder(chaine, separateur, &elements[] en Chaîne)
  # Scinde une chaine de caractères en éléments d'un tableau
  # selon un séparateur.
  Variable sous_chaine en Chaîne
  Variable index en Entier

  index <- -1

  TantQue Trouve(chaine, separateur) > 0
    sous_chaine <- Gauche(chaine, Trouve(chaine, separateur) - 1)
    index <- index + 1
    Redim elements[index]
    elements[index] <- sous_chaine
    chaine <- Droite(chaine, Longueur(chaine) - Trouve(chaine, separateur))
  FinTantQue

  index <- index + 1
  Redim elements[index]
  elements[index] <- chaine
FinProcédure

Fonction CommencePar(ch, v en Chaîne) en Booléen
  Retourne Gauche(ch, Longueur(v)) = v
FinFonction

Fonction FinitPar(ch, v en Chaîne) en Booléen
  Retourne Droite(ch, Longueur(v)) = v
FinFonction

Fonction Contient(ch, v en Chaîne) en Booléen
  Retourne Trouve(ch, v) > 0
FinFonction

#####################
# AUTRES UTILITAIRES
#####################

Fonction Base(nombre, base en Entier) en Chaîne
  Variables caracteres, resultat en Chaîne
  Si base < 2 OU base > 36 Alors
    Retourne "-1"
  FinSi
  Si nombre = 0 Alors
    Retourne "0"
  FinSi
  caracteres <- "0123456789ABCDEFGHIJKLMMNOPQRSTUVWXYZ"
  resultat <- ""
  TantQue nombre > 0
    resultat <- Extraire(caracteres, nombre % base + 1, 1) & resultat
    nombre <- nombre / base
  FinTantQue
  Retourne resultat
FinFonction

Fonction Base10(nombre en Quelconque, base en Entier) en Entier
  Variables param, caracteres en Chaîne
  Variables index, car_index, resultat en Entier
  param <- Chaîne(nombre)
  Si base < 2 OU base > 36 Alors
    Ecrire "Erreur : base invalide >", base, "< [2-36]"
    Retourne -1
  FinSi
  Si param = "0" Alors
    Retourne 0
  FinSi
  caracteres <- "0123456789ABCDEFGHIJKLMMNOPQRSTUVWXYZ"
  resultat <- 0
  Pour index <- 1 à Longueur(param)
    car_index <- Trouve(caracteres, Extraire(param, index, 1)) - 1
    Si car_index > base Alors
      Retourne -1
    FinSi
    resultat <- resultat * base
    resultat <- resultat + car_index
  index Suivant
  Retourne resultat
FinFonction

Fonction Abs(n en Quelconque) en Quelconque
  # Retourne la valeur absolue de `n`.
  Si Type(n) <> "Entier" ET Type(n) <> "Numérique" Alors
    Panique "Abs : type `Entier` ou `Numérique` attendu !"
  FinSi
  Si n < 0 Alors
    Retourne -n
  FinSi
  Retourne n
FinFonction

Fonction Arrondir(n en Numérique, p en Entier) en Numérique
  # Arrondit un Numérique `n` selon un nombre de chiffres après la virgule `p`.
  Variables t, g, d en Chaîne
  Variables L, a en Entier

  Si p <= 0 Alors
    p <- 1
  FinSi

  t <- Chaîne(n)
  g <- Extraire(t, 1, Trouve(t, "."))
  L <- Longueur(t) - Longueur(g)
  d <- Extraire(t, Longueur(g) + 1, L)

  Si p >= L Alors
    Retourne n
  FinSi

  a <-  Entier(Extraire(d, p + 1, 1))

  Si a >= 5 Alors
    d <- Chaîne(Entier(Extraire(d, 1, p)) + 1)
  Sinon
    d <- Extraire(d, 1, p)
  FinSi

  Retourne Numérique(g & d)
FinFonction

Fonction AléaP(poids[] en Numérique) en Entier
  # Retourne un entier aléatoire
  # entre 0 et Taille(poids) - 1 (inclus)
  # selon une liste de poids donnée en paramètre.
  Variables s, r en Numérique
  Variable i en Entier

  Si Taille(poids) = 0 Alors
    Retourne 0
  FinSi

  s <- 0.0
  Pour i <- 0 à Taille(poids) - 1
    s <- s + poids[i]
  i Suivant

  r <- Aléa() * s
  Pour i <- 0 à Taille(poids) - 1
    r <- r - poids[i]
    Si r < 0 Alors
      Retourne i
    FinSi
  i Suivant

  Retourne Taille(poids) - 1
FinFonction

Fonction Max(a, b en Quelconque) en Quelconque
  # Retourne la plus grande des deux valeurs.
  Si a > b Alors
    Retourne a
  FinSi
  Retourne b
FinFonction

Fonction Min(a, b en Quelconque) en Quelconque
  # Retourne la plus petite des deux valeurs.
  Si a < b Alors
    Retourne a
  FinSi
  Retourne b
FinFonction

############################
# UTILITAIRES POUR TABLEAUX
############################

Fonction Somme(T[] en Quelconque) en Quelconque
  # Retourne la somme des valeurs d'un Tableau.
  Variable i en Entier
  Variable s en Quelconque
  Si Type(T[0]) <> "Entier" ET Type(T[0]) <> "Numérique" Alors
    Panique "Somme : type `Entier` ou `Numérique` attendu [", Type(T[0]), "]"
  FinSi
  s <- T[0]
  Pour i <- 1 à Taille(T) - 1
    s <- s + T[i]
  i Suivant
  Retourne s
FinFonction

Fonction Compter(T[] en Quelconque, valeur en Quelconque) en Entier
  # Retourne le nombre d'occurences d'une valeur
  # se trouvant dans un Tableau
  Variables c, i en Entier
  c <- 0
  Pour i <- 0 à Taille(T) - 1
    Si T[i] = valeur Alors
      c <- c + 1
    FinSi
  i Suivant
  Retourne c
FinFonction

Fonction ___Index(T[] en Quelconque, valeur en Quelconque, casse en Booléen) en Entier
  # Retourne le premier index d'une valeur dans un Tableau.
  # Retourne -1 si non trouvée.
  # Si le paramètre `casse` est VRAI, la recherche est 
  # sensible à la casse (type `Chaîne` uniquement).
  Variable i en Entier
  Variables v1, v2 en Quelconque
  Variables C1, C2 en Booléen

  C2 <- Type(valeur) = "Chaîne"
  C1 <- NON(casse) ET C2

  Si C1 Alors
    v2 <- Minus(valeur)
  Sinon
    v2 <- valeur
  FinSi

  Pour i <- 0 à Taille(T) - 1
    Si C1 Alors
      v1 <- Minus(T[i])
    Sinon
      v1 <- T[i]
    FinSi
    Si v1 = v2 Alors
      Retourne i
    FinSi
  i Suivant

  Retourne -1
FinFonction

Fonction IndexSC(T[] en Chaîne, valeur en Chaîne) en Entier
  Retourne ___Index(T, valeur, VRAI)
FinFonction

Fonction Index(T[] en Quelconque, valeur en Quelconque) en Entier
  Retourne ___Index(T, valeur, FAUX)
FinFonction

Fonction TMax(T[] en Quelconque) en Quelconque
  # Retourne la plus grande valeur d'un tableau.
  Variable i en Entier
  Variable n en Quelconque
  n <- T[0]
  Pour i <- 1 à Taille(T) - 1
    Si T[i] > n Alors
      n <- T[i]
    FinSi
  i Suivant
  Retourne n
FinFonction

Fonction TMin(T[] en Quelconque) en Quelconque
  # Retourne la plus petite valeur d'un tableau.
  Variable i en Entier
  Variable n en Quelconque
  n <- T[0]
  Pour i <- 1 à Taille(T) - 1
    Si T[i] < n Alors
      n <- T[i]
    FinSi
  i Suivant
  Retourne n
FinFonction

Fonction TLongueur(T[] en Quelconque) en Entier
  # Retourne le nombre d'éléments dans une liste
  Variables c, i en Entier
  c <- 0
  Pour i <- 0 à Taille(T) - 1
    Si T[i] Alors
      c <- c + 1
    FinSi
  i Suivant
  Retourne c
FinFonction

Procédure Trancher(T[] en Quelconque, idx1, idx2 en Entier, &U[] en Quelconque)
  # Copie les élements de `idx1` à `idx2` d'un Tableau `T` dans un Tableau `U`.
  Variables min, max, i en Entier

  Si TLongueur(T) = 0 Alors
    Panique "Trancher : impossible de trancher un tableau vide"
  FinSi

  min <- Min(idx1, idx2)
  max <- Max(idx1, idx2)

  Si min < 0 Alors
    Panique "Trancher : index invalide", min
  FinSi

  Redim U[max - min]

  Si max > TLongueur(T) - 1 Alors
    Panique "Trancher : index invalide", max
  FinSi

  Pour i <- min à max
    U[Abs(i - min)] <- T[i]
  i Suivant
FinProcédure

Procédure ___Echanger(&T[] en Quelconque, index1, index2 en Entier)
  Variable temp en Quelconque
  temp <- T[index1]
  T[index1] <- T[index2]
  T[index2] <- temp
FinProcédure

Procédure Insérer(&T[] en Quelconque, valeur en Quelconque, index en Entier)
  # Insère une valeur dans un tableau à l'index donné.
  Variable i en Entier

  Redim T[Taille(T)]

  T[Taille(T) - 1] <- valeur
  Pour i <- Taille(T) - 2 à index Pas -1
    ___Echanger(T, i, i + 1)
  i Suivant
FinProcédure

Procédure Supprimer(&T[] en Quelconque, index en Entier)
  # Supprime l'élement d'une liste à l'index donné.
  Variable i en Entier

  Pour i <- index à Taille(T) - 2
    ___Echanger(T, i, i + 1)
  i Suivant
  Redim T[Taille(T) - 2]
FinProcédure

Fonction ___Partitionner(&T[] en Quelconque, min, max en Entier, croissant en Booléen) en Entier
  Variable pivot en Quelconque
  Variables i, j en Entier
  Variable ordre en Booléen

  pivot <- T[max]
  i <- min

  Pour j <- min à max - 1
    Si croissant Alors
      ordre <- T[j] <= pivot
    Sinon
      ordre <- T[j] >= pivot
    FinSi
    Si ordre Alors
      ___Echanger(T, i, j)
      i <- i + 1
    FinSi
  j Suivant

  ___Echanger(T, i, max)
  Retourne i
FinFonction

Procédure ___Quicksort(&T[] en Quelconque, min, max en Entier, croissant en Booléen)
  Variable p en Entier

  Si min >= max OU max < 0 Alors
    Terminer
  FinSi

  p <- ___Partitionner(T, min, max, croissant)
  ___Quicksort(T, min, p - 1, croissant)
  ___Quicksort(T, p + 1, max, croissant)
FinProcédure

Procédure Trier(&T[] en Quelconque)
  ___Quicksort(T, 0, Taille(T) - 1, VRAI)
FinProcédure

Procédure Inverser(&T[] en Quelconque)
  ___Quicksort(T, 0, Taille(T) - 1, FAUX)
FinProcédure

Procédure ___InitTableau(&T[] en Quelconque, valeur en Quelconque)
  Variable i en Entier
  Pour i <- 0 à Taille(T) - 1
    T[i] <- valeur
  i Suivant
FinProcédure

Procédure Mélanger(&T[] en Quelconque)
  Tableau COMPTEUR[] en Entier
  Tableau TEMP[] en Quelconque
  Variables i, idx en Entier

  Redim COMPTEUR[Taille(T) - 1]
  Redim TEMP[Taille(T) - 1]
  ___InitTableau(COMPTEUR, 0)
  i <- 0

  TantQue Somme(COMPTEUR) < Taille(T)
    idx <- Entier(Aléa() * Taille(T))
    Si COMPTEUR[idx] = 0 Alors
      TEMP[i] <- T[idx]
      COMPTEUR[idx] <- 1
      i <- i + 1
    FinSi
  FinTantQue

  T <- TEMP
FinProcédure

Fonction TContient(T[] en Quelconque, v en Quelconque) en Booléen
  Variables d, f en Entier

  d <- 0
  f <- Taille(T) - 1

  TantQue d < f + 1
    Si T[d] = v OU T[f] = v Alors
      Retourne VRAI
    FinSi
    d <- d + 1
    f <- f - 1
  FinTantQue
  Retourne FAUX
FinFonction

Procédure Grouper(T[] en Quelconque, &G[] en Quelconque)
  # Groupe les valeurs d'un tableau T dans un tableau G.
  # Ex : [1, 2, 2, 1, 3] → [1, 2, 3]
  Table groupe
    Clef en Chaîne
    Valeur en Entier
  FinTable

  Variable i en Entier
  Variable e en Chaîne

  Pour i <- 0 à Taille(T) - 1
    e <- Chaîne(T[i])
    Si NON(Existe(groupe, e)) Alors
      groupe[e] <- 1
      Redim G[Taille(Clefs(groupe)) - 1]
      G[Taille(G) - 1] <- T[i]
    FinSi
  i Suivant
FinProcédure
